{"version":3,"sources":["resizable/common.ts","resizable/Gutter.tsx","resizable/useMove.tsx","resizable/Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getProperty","direction","GutterContainer","styled","div","GutterSpaceVertical","css","GutterSpaceHorizontal","GutterSpace","GutterBarVertical","GutterBarHorizontal","GutterBar","Gutter","index","onMouseDown","BarComponent","mousedown","React","useCallback","e","Bar","undefined","setNewSize","before","after","property","delta","newBeforeSize","box","newAfterSize","minSize","node","style","recalculateSize","arr","size","oldSize","reduce","value","sum","map","ContainerElement","props","Container","children","className","id","GutterComponent","useResizeAware","resizeListener","sizes","useState","childrenSizes","setChildrenSizes","oldStateRef","useRef","length","useEffect","state","current","Children","count","oldState","setSizes","recalculate","reset","newSizes","mainChunk","JSON","stringify","runEffect","onEnd","startSateRef","onMouseMove","preventDefault","screenX","screenY","x","y","onMouseUp","beforeBox","getBoundingClientRect","afterBox","nextElementSibling","previousElementSibling","getAfterBefore","currentTarget","Number","getAttribute","document","addEventListener","removeEventListener","useMove","setValue","useOnEnd","childrenWithWrappers","child","data","isValidElement","Fragment","key","wrapChildren","Panel","color","ContainerMain","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b3bc816.chunk.js","sourcesContent":["export type Direction = 'row' | 'column';\nexport const getProperty = (direction: Direction) =>\n  direction === 'row' ? 'width' : 'height';\n\nexport type MinWidthType<T = undefined> = T & {\n  minSize?: number;\n};\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { getProperty, Direction } from './common';\n\ninterface Props {\n  direction: Direction;\n}\n\nexport type OnMouseDown = (e: React.SyntheticEvent, index: number) => void;\ninterface GutterProps {\n  onMouseDown: OnMouseDown;\n  index: number;\n  direction: Direction;\n  BarComponent?: React.ComponentType<any>;\n}\n\nconst spaceSize = '10px';\n\n// it has 0 size\nconst GutterContainer = styled.div`\n  position: relative;\n  overflow: visible;\n  width: 100%;\n  height: 100%;\n  ${({ direction }: Props) => getProperty(direction)}: 0;\n`;\n\nconst GutterSpaceVertical = css`\n  cursor: col-resize;\n  width: ${spaceSize};\n  left: calc(${spaceSize} / 2 * -1);\n  flex-direction: row;\n`;\n\nconst GutterSpaceHorizontal = css`\n  cursor: row-resize;\n  height: ${spaceSize};\n  top: calc(${spaceSize} / 2 * -1);\n  flex-direction: column;\n`;\n\nconst GutterSpace = styled.div`\n  position: absolute;\n  z-index: 1000;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n\n  ${({ direction }: Props) =>\n    direction === 'column' ? GutterSpaceHorizontal : GutterSpaceVertical};\n`;\n\nconst GutterBarVertical = css`\n  width: 1px;\n\n  ${GutterSpace}:hover & {\n    border-left: 2px dashed #a9418b;\n  }\n`;\n\nconst GutterBarHorizontal = css`\n  content: 'tableton';\n  height: 1px;\n\n  ${GutterSpace}:hover & {\n    border-top: 2px dashed #a9418b;\n  }\n`;\n\nconst GutterBar = styled.div`\n  height: 100%;\n  width: 100%;\n\n  ${({ direction }: Props) =>\n    direction === 'column' ? GutterBarHorizontal : GutterBarVertical};\n`;\n\nexport const Gutter: React.FC<GutterProps> = ({\n  index,\n  onMouseDown,\n  direction,\n  BarComponent,\n}) => {\n  const mousedown = React.useCallback(\n    (e) => {\n      onMouseDown(e, index);\n    },\n    [onMouseDown, index]\n  );\n\n  const Bar = (BarComponent !== undefined\n    ? BarComponent\n    : GutterBar) as React.ComponentType<any>;\n\n  return (\n    <GutterContainer direction={direction} onMouseDown={mousedown}>\n      <GutterSpace direction={direction}>\n        <Bar direction={direction} />\n      </GutterSpace>\n    </GutterContainer>\n  );\n};\n","import React from 'react';\n\nimport { Direction, getProperty } from './common';\n\ninterface Box {\n  width: number;\n  height: number;\n}\n\ninterface OnEndProps {\n  beforeBox: Box;\n  afterBox: Box;\n  index: number;\n}\n\nexport type OnEnd = (props: OnEndProps) => void;\n\ninterface Item {\n  box: Box;\n  node: Element;\n  minSize: number | null;\n}\n\ninterface State {\n  index: number;\n  x: number;\n  y: number;\n  before: Item;\n  after: Item;\n}\n\nconst setNewSize = (\n  before: Item,\n  after: Item,\n  property: 'width' | 'height',\n  delta: number\n) => {\n  let newBeforeSize = before.box[property] - delta;\n  let newAfterSize = after.box[property] + delta;\n\n  // make check for minimum sizes\n  if (\n    (before.minSize && before.minSize > newBeforeSize) ||\n    (after.minSize && after.minSize > newAfterSize)\n  ) {\n    return;\n  }\n\n  // @ts-ignore\n  before.node.style[property] = `${newBeforeSize}px`;\n\n  // @ts-ignore\n  after.node.style[property] = `${newAfterSize}px`;\n};\n\nconst getAfterBefore = (\n  node: Element | null\n): { after?: Element; before?: Element } => {\n  if (node) {\n    const after = node.nextElementSibling;\n    const before = node.previousElementSibling;\n\n    if (after && before) {\n      return {\n        after,\n        before,\n      };\n    }\n  }\n\n  return {};\n};\n\n/**\n * Breaks out from React sandbox and works directly on DOM\n * When finished, will sync DOM sizes into react state\n */\nexport const useMove = (direction: Direction, onEnd: OnEnd) => {\n  const startSateRef = React.useRef<State | null>(null);\n\n  const onMouseMove = React.useCallback(\n    (e) => {\n      e.preventDefault();\n\n      const state = startSateRef.current;\n      if (!state) {\n        return;\n      }\n\n      const { screenX, screenY } = e;\n      const { before, after } = state;\n\n      // recalculate sizes for both\n      if (direction === 'row') {\n        // width and X are important\n        const delta = state.x - screenX;\n        setNewSize(before, after, 'width', delta);\n      } else {\n        // height and Y are important\n        const delta = state.y - screenY;\n        setNewSize(before, after, 'height', delta);\n      }\n    },\n    [direction]\n  );\n\n  const onMouseUp = React.useCallback(\n    (e) => {\n      const state = startSateRef.current;\n      if (!state) {\n        return;\n      }\n\n      startSateRef.current = null;\n\n      const { index, after, before } = state;\n      const beforeBox = before.node.getBoundingClientRect();\n      const afterBox = after.node.getBoundingClientRect();\n\n      onEnd({\n        beforeBox,\n        afterBox,\n        index,\n      });\n    },\n    [onEnd]\n  );\n\n  const onMouseDown = React.useCallback((e, index) => {\n    const { before, after } = getAfterBefore(e.currentTarget);\n    if (before && after) {\n      const beforeBox = before.getBoundingClientRect();\n      const afterBox = after.getBoundingClientRect();\n\n      startSateRef.current = {\n        x: e.screenX,\n        y: e.screenY,\n        before: {\n          box: beforeBox,\n          node: before,\n          minSize: Number(before.getAttribute('data-min-size')) || 50,\n        },\n        after: {\n          box: afterBox,\n          node: after,\n          minSize: Number(after.getAttribute('data-min-size')) || 50,\n        },\n        index,\n      };\n    }\n  }, []);\n\n  React.useEffect(() => {\n    document.addEventListener('mousemove', onMouseMove, false);\n    document.addEventListener('mouseup', onMouseUp, false);\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('mouseup', onMouseUp, false);\n    };\n  }, [onMouseMove, onMouseUp]);\n\n  return { onMouseDown };\n};\n\nexport const useOnEnd = (\n  direction: Direction,\n  value: number[],\n  setValue: (val: number[]) => void\n): OnEnd => {\n  const property = getProperty(direction);\n\n  return React.useCallback(\n    ({ beforeBox, afterBox, index }) => {\n      value[index - 1] = beforeBox[property];\n      value[index] = afterBox[property];\n      setValue(value);\n    },\n    [property, value, setValue]\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\n// @ts-ignore\nimport useResizeAware from 'react-resize-aware';\n\nimport { Direction, getProperty } from './common';\nimport { OnMouseDown, Gutter } from './Gutter';\nimport { useOnEnd, useMove } from './useMove';\n\ninterface ContainerProps {\n  direction?: Direction;\n  className?: string;\n  id?: string;\n  GutterComponent?: React.ComponentType<any>;\n}\n\ninterface DataProp {\n  ['data-min-size']: string | undefined;\n}\n\ninterface State {\n  length: number; // number of children,\n  size: number | null; // last width | height\n}\n\ntype SetState = (value: number[]) => void;\n\nconst runEffect = (\n  oldState: State,\n  size: number,\n  children: React.ReactNode,\n  sizes: number[],\n  setSizes: SetState\n) => {\n  let recalculate = false;\n  let reset = false;\n  const length = React.Children.count(children);\n\n  if (oldState.size !== size) {\n    recalculate = true;\n    reset = !oldState.size; //keep reseting till we get correct value\n  }\n\n  if (oldState.length !== length) {\n    reset = true;\n    recalculate = true;\n  }\n\n  if (!recalculate) {\n    return;\n  }\n\n  let newSizes = null;\n  if (reset) {\n    // this is initial calculation\n    const mainChunk = size / React.Children.count(children);\n    newSizes = React.Children.map(children, () => mainChunk);\n  } else {\n    // find the correct aspect ration\n    newSizes = recalculateSize(sizes, size);\n  }\n\n  // don't set, if nothing is changed\n  // lame way to compare content of arrays\n  if (newSizes && JSON.stringify(newSizes) !== JSON.stringify(sizes)) {\n    setSizes(newSizes);\n  }\n};\n\nconst wrapChildren = (\n  direction: Direction,\n  children: React.ReactNode,\n  sizes: number[],\n  onMouseDown: OnMouseDown,\n  GutterComponent?: React.ComponentType<any>\n) => {\n  const property = getProperty(direction);\n\n  return React.Children.map(children, (child, index) => {\n    const value = sizes[index] || 0;\n    const data: DataProp = {\n      'data-min-size': undefined,\n    };\n\n    if (React.isValidElement(child)) {\n      const props = child.props;\n      if (props && 'minSize' in props) {\n        data['data-min-size'] = props.minSize;\n      }\n    }\n\n    return (\n      <React.Fragment key={index}>\n        {index !== 0 ? (\n          <Gutter\n            direction={direction}\n            index={index}\n            onMouseDown={onMouseDown}\n            BarComponent={GutterComponent}\n          />\n        ) : null}\n        <div style={{ [property]: value }} {...data}>\n          {child}\n        </div>\n      </React.Fragment>\n    );\n  });\n};\n\nconst recalculateSize = (arr: number[], size: number): number[] => {\n  const oldSize = arr.reduce((value, sum) => value + sum, 0);\n  return arr.map((value) => (1 / oldSize) * value * size);\n};\n\nconst ContainerElement = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: ${(props: { direction: Direction }) => props.direction};\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Container: React.FC<ContainerProps> = ({\n  direction = 'row',\n  children,\n  className,\n  id,\n  GutterComponent,\n}) => {\n  const [resizeListener, sizes] = useResizeAware();\n  const [childrenSizes, setChildrenSizes] = React.useState<number[]>([]);\n  const oldStateRef = React.useRef<State>({\n    length: 0,\n    size: null, // height for column and width for row\n  });\n\n  const size = sizes[getProperty(direction)];\n\n  React.useEffect(() => {\n    const state = oldStateRef.current;\n    const length = React.Children.count(children);\n    oldStateRef.current = { length, size };\n    runEffect(state, size, children, childrenSizes, setChildrenSizes);\n  }, [id, size, children, childrenSizes, setChildrenSizes]);\n\n  const onEnd = useOnEnd(direction, childrenSizes, setChildrenSizes);\n  const { onMouseDown } = useMove(direction, onEnd);\n  const childrenWithWrappers = wrapChildren(\n    direction,\n    children,\n    childrenSizes,\n    onMouseDown,\n    GutterComponent\n  );\n\n  return (\n    <ContainerElement direction={direction} className={className}>\n      {resizeListener}\n      {childrenWithWrappers}\n    </ContainerElement>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { MinWidthType, Container } from './resizable';\n\ntype Color = { color: string | undefined };\nconst Panel = styled.div<MinWidthType<Color>>`\n  background-color: ${(props: Color) => (props.color ? props.color : 'white')};\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n`;\n\nconst ContainerMain = styled(Container)`\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst GutterComponent = styled.div`\n  height: 100%;\n  width: 100%;\n  background-color: #c6c6c6;\n`;\n\nfunction App() {\n  return (\n    <ContainerMain>\n      <Panel minSize={100} color=\"#f6d186\" />\n      <Container direction=\"column\">\n        <Panel color=\"#fcf7bb\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </Panel>\n        <Container id=\"something\" GutterComponent={GutterComponent}>\n          <Panel color=\"#4baea0\"></Panel>\n          <Panel color=\"#b6e6bd\"></Panel>\n          <Panel color=\"#f1f0cf\"></Panel>\n        </Container>\n      </Container>\n      <Panel color=\"#f19292\" />\n    </ContainerMain>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}